"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var contract_utils_1 = require("../utils/contract_utils");
var assertAbiIsStored = function (receipt, web3, address) { return __awaiter(_this, void 0, void 0, function () {
    var err, abi;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                err = receipt.errorMessage;
                if (!(err === null)) return [3, 2];
                return [4, web3.appchain.getAbi(address)];
            case 1:
                abi = _a.sent();
                if (abi === '0x') {
                    err = 'store abi failure';
                }
                else {
                    console.log('store abi success');
                    return [2];
                }
                _a.label = 2;
            case 2: throw err;
        }
    });
}); };
var pollingReceipt = function (web3, hash) {
    var remain = 10;
    var p = new Promise(function (resolve, reject) {
        var interval = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
            var receipt;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        remain = remain - 1;
                        return [4, web3.appchain.getTransactionReceipt(hash)];
                    case 1:
                        receipt = _a.sent();
                        if (receipt) {
                            clearInterval(interval);
                            resolve(receipt);
                        }
                        else if (remain < 0) {
                            reject('fetch transaction receipt overtime');
                        }
                        return [2];
                }
            });
        }); }, 1000);
    });
    return p;
};
var storeAbiToBlockchain = function (contractInfo, web3, address) { return __awaiter(_this, void 0, void 0, function () {
    var abi, validUntilBlock, chainId, nonce, value, version, quota, privateKey, from, to, abibytes, data, tx, res, receipt, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log('store abi ...');
                abi = contractInfo.abi, validUntilBlock = contractInfo.validUntilBlock, chainId = contractInfo.chainId, nonce = contractInfo.nonce, value = contractInfo.value, version = contractInfo.version, quota = contractInfo.quota, privateKey = contractInfo.privateKey, from = contractInfo.from, to = contractInfo.to;
                abibytes = contract_utils_1.fromUtf8(JSON.stringify(abi));
                data = address + abibytes;
                tx = {
                    from: from,
                    to: to,
                    quota: quota,
                    version: version,
                    value: value,
                    nonce: nonce,
                    data: data,
                    validUntilBlock: validUntilBlock,
                    chainId: chainId,
                    privateKey: privateKey,
                };
                _a.label = 1;
            case 1:
                _a.trys.push([1, 5, , 6]);
                return [4, web3.appchain.sendTransaction(tx).catch(console.error)];
            case 2:
                res = _a.sent();
                return [4, pollingReceipt(web3, res.hash)];
            case 3:
                receipt = _a.sent();
                return [4, assertAbiIsStored(receipt, web3, address)];
            case 4:
                _a.sent();
                return [3, 6];
            case 5:
                err_1 = _a.sent();
                console.error(err_1);
                return [3, 6];
            case 6: return [2];
        }
    });
}); };
var deployContract = function (contractInfo, web3, artifact, args) { return __awaiter(_this, void 0, void 0, function () {
    var bytecode, privateKey, from, nonce, quota, value, chainId, version, validUntilBlock, tx, params, abi, contract, info, receipt, err, address;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log('deploy contract ...');
                bytecode = contractInfo.bytecode, privateKey = contractInfo.privateKey, from = contractInfo.from, nonce = contractInfo.nonce, quota = contractInfo.quota, value = contractInfo.value, chainId = contractInfo.chainId, version = contractInfo.version, validUntilBlock = contractInfo.validUntilBlock;
                tx = { privateKey: privateKey, from: from, nonce: nonce, quota: quota, value: value, chainId: chainId, version: version, validUntilBlock: validUntilBlock };
                params = { data: bytecode, arguments: args };
                abi = contractInfo.abi;
                contract = new web3.appchain.Contract(abi);
                return [4, contract.deploy(params).send(tx)];
            case 1:
                info = _a.sent();
                return [4, pollingReceipt(web3, info.hash)];
            case 2:
                receipt = _a.sent();
                err = receipt.errorMessage, address = receipt.contractAddress;
                contract.options.address = address;
                if (err !== null) {
                    throw err;
                }
                artifact.address = address;
                console.log('contract deployed successful, address:', address);
                return [4, storeAbiToBlockchain(contractInfo, web3, address)];
            case 3:
                _a.sent();
                return [2, Promise.resolve(contract)];
        }
    });
}); };
var deploy = function (contractInfo, web3, artifact, args) { return __awaiter(_this, void 0, void 0, function () {
    var validUntilBlock, res, num;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                validUntilBlock = contractInfo.validUntilBlock;
                if (!(validUntilBlock === undefined)) return [3, 2];
                return [4, web3.appchain.getBlockNumber()];
            case 1:
                res = _a.sent();
                num = Number(res);
                contractInfo.validUntilBlock = num + 88;
                _a.label = 2;
            case 2: return [4, deployContract(contractInfo, web3, artifact, args)];
            case 3: return [2, _a.sent()];
        }
    });
}); };
exports.default = deploy;
//# sourceMappingURL=deploy.js.map