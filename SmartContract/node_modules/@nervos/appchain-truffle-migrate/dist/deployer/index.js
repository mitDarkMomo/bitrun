"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var path_1 = require("../config/path");
var deploy_1 = require("./deploy");
var newDeployer = function (web3, userParams) {
    var paramsFormArtifact = function (artifact) {
        var p = path.resolve(path_1.PathTable.contracts, artifact.build);
        var _a = require(p), bytecode = _a.bytecode, abi = _a.abi;
        var params = Object.assign({ bytecode: bytecode, abi: abi }, userParams);
        return params;
    };
    var deploySingle = function (artifact) { return __awaiter(_this, void 0, void 0, function () {
        var params;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    params = paramsFormArtifact(artifact);
                    return [4, deploy_1.default(params, web3, artifact, [])];
                case 1: return [2, _a.sent()];
            }
        });
    }); };
    var deploySingleWithArgs = function (artifact, args) { return __awaiter(_this, void 0, void 0, function () {
        var params;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    params = paramsFormArtifact(artifact);
                    return [4, deploy_1.default(params, web3, artifact, args)];
                case 1: return [2, _a.sent()];
            }
        });
    }); };
    var deploySingleWithParams = function (artifact, args, userparams) { return __awaiter(_this, void 0, void 0, function () {
        var params;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    params = paramsFormArtifact(artifact);
                    Object.assign(params, userparams);
                    return [4, deploy_1.default(params, web3, artifact, args)];
                case 1: return [2, _a.sent()];
            }
        });
    }); };
    var deploySingleWithoutDeployed = function (artifact, args, userparams) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            throw '{overwrite: false} is not supported';
        });
    }); };
    var deployMany = function (argslist) { return __awaiter(_this, void 0, void 0, function () {
        var _this = this;
        var deploys;
        return __generator(this, function (_a) {
            deploys = argslist.map(function (args) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, deployByArguments(args)];
                        case 1: return [2, _a.sent()];
                    }
                });
            }); });
            return [2, Promise.all(deploys)];
        });
    }); };
    var deployByArguments = function (args) { return __awaiter(_this, void 0, void 0, function () {
        var arglist, artifact, size, lastArg, params;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!Array.isArray(args[0])) return [3, 2];
                    arglist = args[0];
                    return [4, deployMany(args)];
                case 1: return [2, _a.sent()];
                case 2:
                    artifact = args.shift();
                    if (!(args.length === 0)) return [3, 4];
                    return [4, deploySingle(artifact)];
                case 3: return [2, _a.sent()];
                case 4:
                    size = args.length;
                    lastArg = args[size - 1];
                    if (!(typeof lastArg === 'object')) return [3, 9];
                    params = args.pop();
                    if (!(params.overwrite === false)) return [3, 6];
                    return [4, deploySingleWithoutDeployed(artifact, args, params)];
                case 5: return [2, _a.sent()];
                case 6:
                    delete params.overwrite;
                    return [4, deploySingleWithParams(artifact, args, params)];
                case 7: return [2, _a.sent()];
                case 8: return [3, 11];
                case 9: return [4, deploySingleWithArgs(artifact, args)];
                case 10: return [2, _a.sent()];
                case 11: return [2];
            }
        });
    }); };
    var deployAsync = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, deployByArguments(args)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    var deployer = {
        deploy: deployAsync,
    };
    return deployer;
};
exports.default = newDeployer;
//# sourceMappingURL=index.js.map