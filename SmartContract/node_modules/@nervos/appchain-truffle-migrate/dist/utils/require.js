"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require('fs');
var path = require('path');
var Module = require('module');
var vm = require('vm');
var originalrequire = require('original-require');
var Web3 = require('@nervos/web3');
var log = console.log.bind(console, '-- truffle-require --\n');
var defaultContext = {
    Buffer: Buffer,
    clearImmediate: clearImmediate,
    clearInterval: clearInterval,
    clearTimeout: clearTimeout,
    console: console,
    exports: exports,
    global: global,
    process: process,
    setImmediate: setImmediate,
    setInterval: setInterval,
    setTimeout: setTimeout,
};
var requireInNewFile = function (pkgPath) {
    pkgPath = pkgPath.trim();
    if (path.isAbsolute(pkgPath)) {
        return originalrequire(pkgPath);
    }
    if (pkgPath[0] == '.') {
        return originalrequire(path.join(path.dirname(file), pkgPath));
    }
    else {
        var moduleDir = path.dirname(file);
        while (true) {
            try {
                return originalrequire(path.join(moduleDir, 'node_modules', pkgPath));
            }
            catch (e) { }
            var oldModuleDir = moduleDir;
            moduleDir = path.join(moduleDir, '..');
            if (moduleDir === oldModuleDir) {
                break;
            }
        }
        return originalrequire(pkgPath);
    }
};
var file = function (filename, resolver, done, newContext) {
    if (newContext === void 0) { newContext = {}; }
    fs.readFile(filename, { encoding: 'utf8' }, function (err, source) {
        if (err)
            return done(err);
        var m = new Module(filename);
        var dirname = path.dirname(filename);
        var context = __assign({}, defaultContext, { __dirname: dirname, __filename: filename, module: m, require: requireInNewFile, artifacts: resolver });
        Object.keys(newContext).forEach(function (key) {
            context[key] = newContext[key];
        });
        var olddir = process.cwd();
        process.chdir(dirname);
        var script = vm.createScript(source, filename);
        script.runInNewContext(context);
        process.chdir(olddir);
        done(null, m.exports);
    });
};
var exec = function (filename, provider, resolver, done) {
    var web3 = new Web3();
    web3.setProvider(provider);
    file(filename, resolver, {
        web3: web3,
    }, function (err, fn) {
        if (err)
            return done(err);
        fn(done);
    });
};
var Require = {
    file: file,
    exec: exec,
};
exports.default = Require;
//# sourceMappingURL=require.js.map